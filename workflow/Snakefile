# A Snakemake pipeline for quality control of Illumina next-generation
#                            sequencing data
# *********************************************************************


# dependencies
# *********************************************************************
# configuration file
configfile: "config/config.yaml"

import os


# global wild cards of sample and pairpair list
(SAMPLES,) = glob_wildcards(config["input"]["fastq"] + "{sample}_1.fq.gz")


# all output out
# *********************************************************************
rule all:
    input:
        # multiqc output depends on fastqc output, see multiqc rule
        config["multiqc"]["dir"],


# fastqc - check quality of raw fastq-files and merge fastqc reports
# *********************************************************************
rule fastqc:
    input:
        r1=config["input"]["fastq"] + "{sample}_1.fq.gz",
        r2=config["input"]["fastq"] + "{sample}_2.fq.gz",
    output:
        r1_html=config["fastqc"]["dir"] + "{sample}_1_fastqc.html",
        r2_html=config["fastqc"]["dir"] + "{sample}_2_fastqc.html",
        r1_zip=config["fastqc"]["dir"] + "{sample}_1_fastqc.zip",
        r2_zip=config["fastqc"]["dir"] + "{sample}_2_fastqc.zip",
    params:
        threads=config["threads"],
        dir=directory(config["fastqc"]["dir"]),
    log:
        "logs/fastqc/{sample}.fastqc.log"
    conda:
        "envs/fastqc.yaml"
    shell:
        """
        echo "##############################################"
        echo "------------    Running FastQC    ------------"
        echo "##############################################"

        fastqc {input.r1} {input.r2} \
            --threads {params.threads} \
            --format fastq \
            --quiet \
            --outdir {params.dir} \
            2> {log}
        """


# multiqc - merge fastqc reports
# *********************************************************************
rule multiqc:
    input:
        expand(config["fastqc"]["dir"] + "{sample}_1_fastqc.zip", sample=SAMPLES),
        expand(config["fastqc"]["dir"] + "{sample}_2_fastqc.zip", sample=SAMPLES)
    output:
        dir=directory(config["multiqc"]["dir"]),
    params:
        rules.fastqc.params.dir,
    log:
        "logs/multiqc/multiqc.log"
    conda:
        "envs/multiqc.yaml"
    shell:
        """
        echo "##############################################"
        echo "-----------    Running MultiQC    ------------"
        echo "##############################################"
        
        multiqc \
            --force {params} \
            --outdir {output.dir} \
            2> {log}
        """

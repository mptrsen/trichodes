# A Snakemake pipeline for quality control of Illumina next-generation
#                            sequencing data
# *********************************************************************


# dependencies
# *********************************************************************
# configuration file
configfile: "config/config.yaml"

from pathlib import Path


# global wild cards of sample and pairpair list
(SAMPLES,) = glob_wildcards(Path(config["input_dir"], "{sample}_1.fq.gz"))


# all output
# *********************************************************************
rule all:
    input:
        # multiqc output depends on fastqc output, see multiqc rule
        "results/multiqc_report.html",
        # seqkit stats table
        "doc/stats.tsv"

# seqkit stats - simple statistics overview
# ********************************************************************
rule seqkit_stats:
    input:
        fastx = expand(Path(config["input_dir"], "/{sample}_{r}.fastq"), sample = SAMPLES, r = [ 1, 2 ])
    output:
        stats = "doc/stats.tsv"
    log:
        "logs/stats.log"
    params:
        command="stats",
        extra="--all --tabular"
    threads: 2
    wrapper:
        "v2.10.0-1-g4099e4b/bio/seqkit"


# fastqc - check quality of raw fastq-files and merge fastqc reports
# *********************************************************************
rule fastqc:
    input:
        Path(config["input_dir"], "{sample}_{r}.fq.gz")
    output:
        html = "results/01_fastqc/{sample}_{r}.html",
        zip  = "results/01_fastqc/{sample}_{r}_fastqc.zip" # the suffix _fastqc.zip is necessary for multiqc to find the file. If not using multiqc, you are free to choose an arbitrary filename
    params:
        extra = "--quiet"
    log:
        "logs/fastqc/{sample}_{r}.log"
    threads: 2
    resources:
        mem_mb = 1024
    wrapper:
        "v2.10.0-1-g4099e4b/bio/fastqc"

# fastp - all-in-one fastq preprocessor
# ********************************************************************
rule fastp:
    input:
        sample = [ Path(config["input_dir"], "{sample}_1.fq.gz"), Path(config["input_dir"], "{sample}_2.fq.gz") ]
    output:
        trimmed=["results/02_fastp/trimmed/{sample}_1.fq.gz", "results/02_fastp/trimmed/{sample}_2.fq.gz"],
        # Unpaired reads separately
        unpaired1="results/02_fastp/trimmed/{sample}.u1.fq.gz",
        unpaired2="results/02_fastp/trimmed/{sample}.u2.fq.gz",
        # or in a single file
	# unpaired="trimmed/pe/{sample}.singletons.fastq",
        merged="results/02_fastp/trimmed/{sample}.merged.fq.gz",
        failed="results/02_fastp/trimmed/{sample}.failed.fq.gz",
        html="results/02_fastp/report/{sample}.html",
        json="results/02_fastp/report/{sample}.json"
    log:
        "logs/fastp/{sample}.log"
    threads:
        3
    params:
        adapters="--adapter_sequence AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT --adapter_sequence_r2 GATCGGAAGAGCACACGTCTGAACTCCAGTCACGGATGACTATCTCGTATGCCGTCTTCTGCTTG",
        extra="--merge"
    threads: 2
    wrapper:
        "v2.10.0/bio/fastp"

# multiqc - merge fastqc reports
# *********************************************************************
rule multiqc:
    input:
        expand("results/01_fastqc/{sample}_1_fastqc.zip", sample=SAMPLES),
        expand("results/01_fastqc/{sample}_2_fastqc.zip", sample=SAMPLES),
        expand("results/02_fastp/report/{sample}.json", sample = SAMPLES)
    output:
        "results/multiqc_report.html",
        directory("results/multiqc_data")
    params:
        extra = "--data-dir"
    wrapper:
        "v2.10.0/bio/multiqc"
